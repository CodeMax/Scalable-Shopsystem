{"version":3,"sources":["app/backendcall.service.ts"],"names":[],"mappings":"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","file":"app/backendcall.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/observable/throw';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Token} from './token.service';\r\nimport {Article} from './article/article.component';\r\nimport {Shoppingcart} from './shoppingcart/shoppingcart.service';\r\nimport {User} from './user.service';\r\nimport {Delivery} from './articleCheckout/delivery/delivery.component';\r\n\r\n@Injectable()\nexport class BackendcallService {\r\n\r\n      private actionUrl: string;\r\n      private headers: Headers;\r\n      private encodedString: string;\r\n\r\n      constructor(private _http: Http, user: string, pw: string, actionUrl: string) {\r\n        if (user === 'token') {\r\n          this.encodedString = pw;\r\n        } else {\r\n          this.encodedString = 'Basic ' + btoa( user + ':' + pw);\r\n        }\r\n\r\n        this.actionUrl = actionUrl;\r\n        this.headers = new Headers();\r\n        this.headers.append('Authorization', this.encodedString);\r\n        this.headers.append('Content-Type', 'application/json');\r\n        this.headers.append('Accept', 'application/json');\r\n      }\r\n\r\n      // ArticleList\r\n      public getAllArticle = (): Observable<string[]> => {\r\n        return this._http.get(this.actionUrl, {headers: this.headers})\r\n                   .map(this.extractArticleList)\r\n                   .catch(this.handleError);\r\n      }\r\n\r\n      // Article-Detailpage\r\n      public getArticle = (): Observable<Article> => {\r\n        return this._http.get(this.actionUrl, {headers: this.headers})\r\n                   .map(this.extract)\r\n                   .catch(this.handleError);\r\n      }\r\n\r\n      public postArticle = (article: Article): Observable<any> => {\r\n            let body = JSON.stringify(article);\r\n            let options = new RequestOptions({ headers: this.headers });\r\n\r\n            return this._http.post(this.actionUrl, body, options)\r\n                       .catch(this.handleError);\r\n        }\r\n\r\n        public updateArticle = (article: Article): Observable<any> => {\r\n              let body = JSON.stringify(article);\r\n              let options = new RequestOptions({ headers: this.headers });\r\n\r\n              return this._http.put(this.actionUrl, body, options)\r\n                         .catch(this.handleError);\r\n          }\r\n\r\n\r\n      // Authentication\r\n      public getToken(): Promise<Token> {\r\n          return this._http.get(this.actionUrl, {headers: this.headers})\r\n               .toPromise()\r\n               .then(response => this.extractToken(response))\r\n               .catch(this.handleError);\r\n      }\r\n\r\n\r\n      // Shoppingcart\r\n      public getAllShoppingcartItems = (): Observable<Shoppingcart[]> => {\r\n        return this._http.get(this.actionUrl, {headers: this.headers})\r\n                   .map(this.extractShoppingCartList)\r\n                   .catch(this.handleError);\r\n      }\r\n      public deleteShoppingcartItem = (): Observable<any> => {\r\n        return this._http.delete(this.actionUrl, {headers: this.headers})\r\n                   .catch(this.handleError);\r\n      }\r\n      public postArticleToShoppingcart = (articleId: number, userId: number, quantity: number): Observable<any> => {\r\n          let body = JSON.stringify({ articleId, userId, quantity });\r\n          let options = new RequestOptions({ headers: this.headers });\r\n\r\n          return this._http.post(this.actionUrl, body, options)\r\n                     .catch(this.handleError);\r\n      }\r\n      public updateArticleToShoppingcart = (articleId: number, userId: number, quantity: number): Observable<any> => {\r\n          let body = JSON.stringify({ articleId, userId, quantity });\r\n          let options = new RequestOptions({ headers: this.headers });\r\n\r\n          return this._http.put(this.actionUrl, body, options)\r\n                     .catch(this.handleError);\r\n      }\r\n\r\n      // User\r\n      public getUserData = (): Observable<User> => {\r\n        return this._http.get(this.actionUrl, {headers: this.headers})\r\n                   .map(this.extract)\r\n                   .catch(this.handleError);\r\n      }\r\n      public saveUserData = (id: number, firstname: string, lastname: string, address: string, postcode: string,\r\n                             city: string, country: string): Observable<User> => {\r\n          let body = JSON.stringify({id, firstname, lastname, address, postcode, city, country });\r\n          let options = new RequestOptions({ headers: this.headers });\r\n\r\n          return this._http.post(this.actionUrl, body, options)\r\n                     .map(this.extract)\r\n                     .catch(this.handleError);\r\n      }\r\n      public updateUserData = (id: number, firstname: string, lastname: string, address: string, postcode: string,\r\n                             city: string, country: string): Observable<User> => {\r\n          let body = JSON.stringify({id, firstname, lastname, address, postcode, city, country });\r\n          let options = new RequestOptions({ headers: this.headers });\r\n\r\n          return this._http.put(this.actionUrl, body, options)\r\n                     .map(this.extract)\r\n                     .catch(this.handleError);\r\n      }\r\n      public saveAuthData = (username: string, password: string): Observable<Number> => {\r\n          let body = JSON.stringify({username, password});\r\n          let options = new RequestOptions({ headers: this.headers });\r\n\r\n          return this._http.post(this.actionUrl, body, options)\r\n                     .map(this.extract)\r\n                     .catch(this.handleError);\r\n      }\r\n\r\n\r\n      // Delivery\r\n      public getDelivery = (): Observable<Delivery> => {\r\n        return this._http.get(this.actionUrl, {headers: this.headers})\r\n                   .map(this.extract)\r\n                   .catch(this.handleError);\r\n      }\r\n\r\n\r\n\r\n      private extractArticleList(res: Response) {\r\n          console.log('extractData() is executed.');\r\n          let body = res.json();\r\n          return body.articleList || { };\r\n      }\r\n\r\n      private extract(res: Response) {\r\n          console.log('extract() is executed.');\r\n          let body = res.json();\r\n          return body || { };\r\n      }\r\n\r\n      private extractShoppingCartList(res: Response) {\r\n          console.log('extract() is executed.');\r\n          let body = res.json();\r\n          return body.shoppingcartList || { };\r\n      }\r\n\r\n      private extractToken(res: Response) {\r\n          console.log('extractData() is executed.');\r\n          let token = res.json().jwtToken;\r\n          return token || { };\r\n      }\r\n\r\n      private handleError (error: any) {\n/*        let errMsg = (error.message) ? error.message :\r\n           error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n        console.log(errMsg); */\r\n        return Observable.throw(error);\r\n      }\r\n}\r\n"],"sourceRoot":"/source/"}