{"version":3,"sources":["app/backendcall.service.ts"],"names":[],"mappings":"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","file":"app/backendcall.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/toPromise';\r\nimport 'rxjs/add/observable/throw';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Token} from './token.service';\r\n\r\n@Injectable()\nexport class BackendcallService {\n\r\n      private actionUrl: string;\r\n      private headers: Headers;\r\n      private encodedString: string;\r\n\r\n      constructor(private _http: Http, user: string, pw: string, actionUrl: string) {\r\n        if (user === 'token') {\r\n          this.encodedString = pw;\r\n        } else {\r\n          this.encodedString = 'Basic ' + btoa( user + ':' + pw);\r\n        }\r\n\r\n        this.actionUrl = actionUrl;\r\n        this.headers = new Headers();\r\n        this.headers.append('Authorization', this.encodedString);\r\n        this.headers.append('Content-Type', 'application/json');\r\n        this.headers.append('Accept', 'application/json');\r\n      }\r\n\r\n      public getAll = (): Observable<String[]> => {\r\n        return this._http.get(this.actionUrl, {headers: this.headers})\r\n                   .map(this.extractData)\r\n                   .catch(this.handleError);\r\n      }\r\n\r\n      public getToken(): Promise<Token> {\r\n          return this._http.get(this.actionUrl, {headers: this.headers})\r\n               .toPromise()\r\n               .then(response => this.extractToken(response))\r\n               .catch(this.handleError);\r\n      }\r\n\r\n      public postUserData = (username: String, firstname: String, lastname: String, password: String,\r\n                            address: String, postcode: String, city: String, country:String): Observable<Token> => {\r\n          let body = JSON.stringify({ username, firstname, lastname, password, address, postcode, city, country });\r\n          let headers = new Headers({ 'Content-Type': 'application/json' });\r\n          let options = new RequestOptions({ headers: headers });\r\n\r\n          return this._http.post(this.actionUrl, body, options)\r\n                     .map(this.extractToken)\r\n                     .catch(this.handleError);\r\n      }\r\n\r\n      private extractData(res: Response) {\r\n          console.log('extractData() is executed.');\r\n          let body = res.json();\r\n          return body.content || { };\r\n      }\r\n\r\n      private extractToken(res: Response) {\r\n          console.log('extractData() is executed.');\r\n          let token = res.json().jwtToken;\r\n          return token || { };\r\n      }\r\n\r\n      private handleError (error: any) {\n        let errMsg = (error.message) ? error.message :\r\n           error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n        console.error(errMsg);\r\n        return Observable.throw(401);\r\n      }\r\n}\r\n"],"sourceRoot":"/source/"}