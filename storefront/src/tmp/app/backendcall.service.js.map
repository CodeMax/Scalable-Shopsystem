{"version":3,"sources":["app/backendcall.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,yBAAyB,CAAC,CAAA;AACjC,QAAO,6BAA6B,CAAC,CAAA;AACrC,2BAAyB,iBAAiB,CAAC,CAAA;AAI3C;IAMM,4BAAoB,KAAW,EAAE,IAAY,EAAE,EAAU,EAAE,SAAiB;QANlF,iBAiDC;QA3CyB,UAAK,GAAL,KAAK,CAAM;QAexB,WAAM,GAAG;YACd,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAI,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,KAAI,CAAC,OAAO,EAAC,CAAC;iBAClD,GAAG,CAAC,KAAI,CAAC,WAAW,CAAC;iBACrB,KAAK,CAAC,KAAI,CAAC,WAAW,CAAC,CAAC;QACtC,CAAC,CAAA;QAlBC,EAAE,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAE,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3B,IAAI,CAAC,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QACxD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;IACpD,CAAC;IAQM,qCAAQ,GAAf;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC;aACxD,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,CAAC,QAAQ,EAAxB,CAAwB,CAAC;aAC1C,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAEW,wCAAW,GAAnB,UAAoB,GAAa;QAC7B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,EAAG,CAAC;IAC/B,CAAC;IAEO,wCAAW,GAAnB,UAAqB,KAAU;QAC7B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAE1E;WACG;QAEH,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAjDP;QAAC,iBAAU,EAAE;;0BAAA;IAkDb,yBAAC;AAAD,CAjDA,AAiDC,IAAA;AAjDY,0BAAkB,qBAiD9B,CAAA","file":"app/backendcall.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, Response } from '@angular/http';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/toPromise';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Token} from './token.service';\r\n\r\n@Injectable()\nexport class BackendcallService {\n\r\n      private actionUrl: string;\r\n      private headers: Headers;\r\n      private encodedString: string;\r\n\r\n      constructor(private _http: Http, user: string, pw: string, actionUrl: string) {\r\n        if (user === 'token') {\r\n          this.encodedString = pw;\r\n        } else {\r\n          this.encodedString = 'Basic ' + btoa( user + ':' + pw);\r\n        }\r\n\r\n        this.actionUrl = actionUrl;\r\n\r\n        this.headers = new Headers();\r\n        this.headers.append('Authorization', this.encodedString);\r\n        this.headers.append('Content-Type', 'application/json');\r\n        this.headers.append('Accept', 'application/json');\r\n      }\r\n\r\n      public getAll = (): Observable<String[]> => {\r\n        return this._http.get(this.actionUrl, {headers: this.headers})\r\n                   .map(this.extractData)\r\n                   .catch(this.handleError);\r\n      }\r\n\r\n      public getToken(): Promise<Token> {\r\n          return this._http.get(this.actionUrl, {headers: this.headers})\r\n               .toPromise()\r\n               .then(response => response.json().jwtToken)\r\n               .catch(this.handleError);\r\n  }\r\n\r\n      private extractData(res: Response) {\r\n          let body = res.json();\r\n          return body.content || { };\r\n      }\r\n\r\n      private handleError (error: any) {\r\n        let errMsg = (error.message) ? error.message :\r\n          error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n\r\n        /*if ( error.status === 401 ) {\r\n        }*/\r\n\r\n        console.error(errMsg);\r\n        return Observable.throw(errMsg);\r\n      }\r\n}\n"],"sourceRoot":"/source/"}